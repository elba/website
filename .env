# This file specifies env vars for development.

# Location of the *postgres* database. For example, if you have created a
# blank database locally named `elba_registry`, this would be
# `postgres://postgres@localhost/elba_registry`.
DATABASE_URL=postgres://postgres:postgres@localhost:5432/elba

# Ip and port that registry application will listen to. It only accepts
# unencrypted traffic with http protocol. If you plan to have https support, 
# you can setup a reverse proxy (eg. niginx).
BIND_TO=0.0.0.0:17000

# Max size of uploading package in bytes.
MAX_UPLOAD_SIZE=31457280

# Strategy of storing uploading package. Possible variants are `LOCAL` | `S3`
STORAGE_STRATEGY=LOCAL

# Local path to store package. Only valid when `STORAGE_STRATEGY` is `LOCAL`
STORAGE_LOCAL_PATH=./tmp/storage
# Url to retrieve package, you may setup nginx on this url to serve static tarballs.
# Only valid when `STORAGE_STRATEGY` is `LOCAL`
STORAGE_LOCAL_URL=

# Credentials for uploading packages to S3. Only valid when `STORAGE_STRATEGY` is `S3`
STORAGE_S3_BUCKET=
STORAGE_S3_ACCESS_KEY=
STORAGE_S3_SECRET_KEY=
STORAGE_S3_REGION=

# Url of the registry backend. It will be used in index metadata entries.
REGISTRY_URL=http://localhost:17000

# Remote git index source with https protocol
REMOTE_INDEX_URL=./tmp/index-bare.git
# Credentials for remote git. You can leave these blank if 
# REMOTE_INDEX_URL is local bare repo
REMOTE_INDEX_USER=
REMOTE_INDEX_PWD=

# The bot information used in commit
INDEX_BOT_NAME=elba-bot
INDEX_BOT_EMAIL=elba-bot@hotmail.com

# Github OAuth application config
GH_OAUTH_ENABLED=false
GH_CLIENT_ID=
GH_CLIENT_SECRET=
GH_OAUTH_SUCCESS_REDIRECT_URL=

# Restrict cors origin. Leave it blank if all domains should be accepted.
CORS_ORIGIN=

# Debug configuration
RUST_BACKTRACE=full
RUST_LOG=debug
